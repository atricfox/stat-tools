// SSR 安全的监控解决方案
interface MonitoringConfig {
  dsn?: string;
  environment?: string;
  enabled?: boolean;
  tracesSampleRate?: number;
}

class SSRSafeMonitoring {
  private config: MonitoringConfig;
  private initialized = false;

  constructor(config: MonitoringConfig) {
    this.config = config;
  }

  // 延迟初始化，只在需要时加载
  private async lazyInit() {
    if (this.initialized) return;

    // 检查环境和配置
    if (!this.config.enabled || !this.config.dsn) {
      this.initialized = true;
      return;
    }

    try {
      if (typeof window !== 'undefined') {
        // 浏览器环境 - 使用标准 Sentry
        const Sentry = await import('@sentry/nextjs');
        Sentry.init({
          dsn: this.config.dsn,
          environment: this.config.environment,
          tracesSampleRate: this.config.tracesSampleRate || 0.1,
        });
      } else {
        // Node.js 环境 - 使用 Node 专用版本
        const Sentry = await import('@sentry/node');
        Sentry.init({
          dsn: this.config.dsn,
          environment: this.config.environment,
          tracesSampleRate: this.config.tracesSampleRate || 0.1,
        });
      }
      this.initialized = true;
    } catch (error) {
      console.warn('Monitoring initialization failed:', error);
      this.initialized = true; // 防止重复尝试
    }
  }

  async captureError(error: Error, extra?: Record<string, any>) {
    await this.lazyInit();
    
    if (typeof window !== 'undefined') {
      // 客户端错误捕获
      try {
        const { captureException } = await import('@sentry/nextjs');
        captureException(error, { extra });
      } catch {
        console.error('Client Error:', error);
      }
    } else {
      // 服务端错误捕获
      try {
        const { captureException } = await import('@sentry/node');
        captureException(error, { extra });
      } catch {
        console.error('Server Error:', error);
      }
    }
  }

  async captureMessage(message: string, level: 'info' | 'warning' | 'error' = 'info') {
    await this.lazyInit();
    
    if (typeof window !== 'undefined') {
      try {
        const { captureMessage } = await import('@sentry/nextjs');
        captureMessage(message, level);
      } catch {
        console[level]('Client Message:', message);
      }
    } else {
      try {
        const { captureMessage } = await import('@sentry/node');
        captureMessage(message, level);
      } catch {
        console[level]('Server Message:', message);
      }
    }
  }
}

// 创建配置化实例
export const monitoring = new SSRSafeMonitoring({
  dsn: process.env.NEXT_PUBLIC_SENTRY_DSN || process.env.SENTRY_DSN,
  environment: process.env.NEXT_PUBLIC_ENVIRONMENT || process.env.NODE_ENV,
  enabled: process.env.NODE_ENV === 'production',
  tracesSampleRate: 0.1,
});

// 便捷的全局错误处理
export const setupGlobalErrorHandling = () => {
  if (typeof window !== 'undefined') {
    // 浏览器环境
    window.addEventListener('error', (event) => {
      monitoring.captureError(event.error);
    });

    window.addEventListener('unhandledrejection', (event) => {
      monitoring.captureError(new Error(event.reason));
    });
  } else {
    // Node.js 环境
    process.on('uncaughtException', (error) => {
      monitoring.captureError(error);
    });

    process.on('unhandledRejection', (reason) => {
      monitoring.captureError(new Error(String(reason)));
    });
  }
};